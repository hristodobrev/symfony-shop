<?php

namespace ShopBundle\Repository;

use Doctrine\DBAL\Query\QueryBuilder;
use ShopBundle\Entity\Category;
use ShopBundle\Entity\Product;

/**
 * PromotionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromotionRepository extends \Doctrine\ORM\EntityRepository
{
    public function getBiggestProductPromotion(Product $product)
    {
        $qb = $this->createQueryBuilder('p');

        $now = (new \DateTime())->setTime(0, 0, 0);

        $result = $qb
            ->select('p')
            ->where('p.dateFrom <= :date')
            ->andWhere('p.dateTo >= :date')
            ->andWhere('p.product = :product_id')
            ->setParameter('date', $now)
            ->setParameter('product_id', $product->getId())
            ->orderBy('p.discount', 'desc')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $result;
    }

    public function getBiggestCategoryPromotion(Category $category)
    {
        $qb = $this->createQueryBuilder('p');

        $now = (new \DateTime())->setTime(0, 0, 0);

        $result = $qb
            ->select('p')
            ->where('p.dateFrom <= :date')
            ->andWhere('p.dateTo >= :date')
            ->andWhere('p.category = :category_id')
            ->setParameter('date', $now)
            ->setParameter('category_id', $category->getId())
            ->orderBy('p.discount', 'desc')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $result;
    }

    public function getBiggestCommonPromotion()
    {
        $qb = $this->createQueryBuilder('p');

        $now = (new \DateTime())->setTime(0, 0, 0);

        $result = $qb
            ->select('p')
            ->where('p.dateFrom <= :date')
            ->andWhere('p.dateTo >= :date')
            ->andWhere($qb->expr()->isNull('p.product'))
            ->andWhere($qb->expr()->isNull('p.category'))
            ->setParameter('date', $now)
            ->orderBy('p.discount', 'desc')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $result;
    }

    public function getCurrentPromotions()
    {
        $qb = $this->createQueryBuilder('p');

        $now = (new \DateTime())->setTime(0, 0, 0);

        $result = $qb
            ->select('p')
            ->where('p.dateFrom <= :date')
            ->andWhere('p.dateTo >= :date')
            ->setParameter('date', $now)
            ->orderBy('p.discount', 'desc')
            ->getQuery()
            ->execute();

        return $result;
    }
}
